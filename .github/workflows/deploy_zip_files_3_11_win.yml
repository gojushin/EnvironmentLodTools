name: Windows Build/Release (Python 3.11)

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Set PLATFORM Environment Variable
        shell: bash
        run: echo "PLATFORM=windows" >> $GITHUB_ENV

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Mark repository as safe for Git
        shell: bash
        run: |
          git config --global --add safe.directory ${{ github.workspace }}

      - name: Check out code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Initialize and Update Git Submodules
        shell: bash
        run: |
          git submodule update --init --recursive

      - name: Set up Python Virtual Environment and Install Python Dependencies
        shell: bash
        run: |
          python -m venv venv
          source venv/Scripts/activate
          if [ -f "requirements.txt" ]; then
            venv/Scripts/python.exe -m pip install --upgrade pip
            pip install --upgrade setuptools
            pip install --upgrade wheel
            pip install pybind11
            pip install build
            pip install -r requirements.txt
          fi

      - name: Get Blender Version from Installed Module
        id: get_blender_version
        shell: bash
        run: |
          source venv/Scripts/activate
          if pip show bpy > /dev/null 2>&1; then
            BLENDER_VERSION=$(pip show bpy | grep -E 'Version:' | awk '{print $2}')
            echo "BLENDER_VERSION=$BLENDER_VERSION" >> $GITHUB_ENV
          else
            echo "bpy module not found in the virtual environment. Please ensure it is installed."
            exit 1
          fi

      - name: Build and Install Python Modules in enviro_lod_tools/external
        shell: bash
        run: |
          source venv/Scripts/activate
          cd enviro_lod_tools/external
          for dir in */ ; do
            if [ -f "$dir/pyproject.toml" ]; then
              echo "Building Python module in $dir"
              cd "$dir"
              python -m build
              pip install dist/*.whl
              cd ..
            fi
          done

      - name: Clean Up Unnecessary Files in enviro_lod_tools/external
        shell: bash
        run: |
          cd enviro_lod_tools/external
          # Remove all files inside subdirectories but keep top-level directories
          find . -mindepth 2 -type f -exec rm -f {} \; || true
          
          # Remove all empty directories
          find . -mindepth 2 -type d -exec rm -rf {} \; || true
          cd ../..

      - name: Move Installed Modules Back to enviro_lod_tools/external
        shell: bash
        run: |
          # Copy all files and directories starting with "pyfqmr" or "xatlas" ignoring version numbers
          cp -r venv/Lib/site-packages/pyfqmr* enviro_lod_tools/external/
          cp -r venv/Lib/site-packages/xatlas* enviro_lod_tools/external/
          
          # Clean up the temporary installation
          rm -rf temp_installation

      - name: Get Tag Name
        id: get_tag
        shell: bash
        run: |
          TAG=$(git describe --tags --exact-match)
          echo "TAGS: $TAG"
          if [ -z "$TAG" ]; then
            echo "No tags on this commit."
            echo "TAG=" >> $GITHUB_ENV
          else
            echo "Found tag: $TAG"
            echo "TAG=$TAG" >> $GITHUB_ENV
          fi

      - name: Exit if No Tag
        if: env.TAG == ''
        run: |
          echo "No valid tag found on this commit. Exiting."
          exit 0

      - name: Cleanup and Prepare for Zipping
        if: env.TAG != ''
        shell: bash
        run: |
          cd enviro_lod_tools
          # Deactivate the virtual environment (if active)
          deactivate || true  # Avoid error if already inactive
          # Remove unnecessary files and directories
          rm -rf __pycache__
          rm -rf ../.github
          rm -rf ../venv
          rm -rf ../__pycache__
          cd ..

      - name: Create Plugin Zip File
        if: env.TAG != ''
        shell: bash
        run: |
          cd enviro_lod_tools
          7z a ../enviro_lod_tools_plugin_${{ env.TAG }}_${{ env.BLENDER_VERSION }}_${{ env.PLATFORM }}.zip ./*

      - name: Create GUI Zip File
        if: env.TAG != ''
        shell: bash
        run: |
          7z a enviro_lod_tools_gui_${{ env.TAG }}_${{ env.BLENDER_VERSION }}_${{ env.PLATFORM }}.zip ./* -xr!.git -xr!*.zip

      - name: Check if Release Exists
        id: release_check
        shell: bash
        run: |
          if gh release view ${{ env.TAG }} > /dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "release_exists=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: env.release_exists == 'false' && env.TAG != ''
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload Plugin Zip to Release
        if: env.TAG != ''
        shell: bash
        run: |
          gh release upload ${{ env.TAG }} enviro_lod_tools_plugin_${{ env.TAG }}_${{ env.BLENDER_VERSION }}_${{ env.PLATFORM }}.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload GUI Zip to Release
        if: env.TAG != ''
        shell: bash
        run: |
          gh release upload ${{ env.TAG }} enviro_lod_tools_gui_${{ env.TAG }}_${{ env.BLENDER_VERSION }}_${{ env.PLATFORM }}.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}